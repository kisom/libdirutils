\input texinfo   @c -*-texinfo-*-
@setfilename libdirutils.info
@include version.texi
@settitle libdirutils @value{VERSION}
@syncodeindex pg cp
@comment %**end of header
@copying
This manual is for libdirutils, a C library providing some utility
functions for manipulating files and working with directories.

Copyright @copyright{} 2012 Kyle Isom <@email{kyle@@tyrfingr.is}>
@end copying

@dircategory Texinfo documentation system
@direntry
* introduction: (intro)Introduction to libdirutils
@end direntry

@titlepage
@title libdirutils
@subtitle for version @value{VERSION}, @value{UPDATED}
@author Kyle Isom (@email{kyle@@tyrfingr.is})
@page
@vskip 0pt plus 1filll
@paragraphindent 0
@insertcopying
@end titlepage

@contents

@ifnottex
@node Top
@top libdirutils

This manual is for libdirutils (version @value{VERSION}, @value{UPDATED}).
@end ifnottex

@menu
* A Quick Introduction::
* Functions Provided::
* Getting the Source::
* Source Code License::
* Index::
@end menu


@node A Quick Introduction
@chapter A Quick Introduction

@pindex intro
@cindex introduction to @command{libdirutils}

@section What is the library?
@command{libdirutils} is a utility library inspired by similar functionality
in the Go and Python programming languages; it provides functions similar
to @command{rm -r} and @command{mkdir -p}, as well as a convenience function
to combine the functionality of @command{access(2)} and @command{stat(2)}.
It provides these functions as convenience functions for working with files
and directories; as the name implies, it is aimed primarily at directories.

@section A simple program
While rather contrived, this program demonstrates the library's usage rather
succinctly. The example and @file{Makefile} are contained in the
@file{examples} directory.

@smallexample
#include <err.h>
#include <stdio.h>
#include <stdlib.h>
#include <sysexits.h>

#include <dirutils.h>


/*
 * Create the directory /tmp/foo/bar/baz/quux and remove it.
 */
int
main(void)
@{
        const char mkdir_path[] = "/tmp/foo/bar/baz/quux";
        const char rmdir_path[] = "/tmp/foo";

        printf("[+] libdirutils example program\n\n");

        printf("[+] mkdir -p %s\n", mkdir_path);
        if (EXIT_FAILURE == makedirs(mkdir_path)) @{
                err(EXIT_FAILURE, "makedirs(%s)", mkdir_path);
        @}

        printf("[+] ensuring %s exists...\n", mkdir_path);
        if (EXISTS_DIR != path_exists(mkdir_path)) @{
                errx(EXIT_FAILURE, "%s was not created", mkdir_path);
        @}

        printf("[+] rm -r %s\n", rmdir_path);
        if (EXIT_FAILURE == rmdirs(rmdir_path)) @{
                err(EXIT_FAILURE, "rmdirs(%s)", rmdir_path);
        @}

        printf("[+] ensuring %s was removed...\n", rmdir_path);
        if (EXISTS_NOENT != path_exists(rmdir_path)) @{
                errx(EXIT_FAILURE, "%s was not removed", mkdir_path);
        @}
        else @{
                printf("[+] done.\n");
        @}
        return EXIT_SUCCESS;
@}
@end smallexample

@section A simple @code{ls}

This is a simple file lister.

@smallexample
#include <sys/types.h>
#include <sys/stat.h>

#include <getopt.h>
#include <limits.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>

#include <dirutils.h>


int
print_filename(const char *path)
@{
        struct stat         st;
        size_t                 len;
        int                 skip = 0;
        static int         out = 0;

        /*
         * If a file doesn't exist, don't show it. It's not considered
         * an error.
         */
        if (-1 == stat(path, &st)) @{
                printf("ENOENT\n");
                return 0;
        @}

        if (path == strstr(path, "./")) @{
                skip = 2;
        @}

        len = strnlen(path, FILENAME_MAX);
        if (0 == len) @{
                return 0;
        @}
        out += strnlen(path, FILENAME_MAX) + 2;
        printf("%s%s\t", path+skip, S_ISDIR(st.st_mode) ? "/" : " ");
        if (out > 80) @{
                printf("\n");
                out = 0;
        @}
        return 0;
@}


static void
usage(const char *argv0)
@{
        printf("Usage: %s [-hr] files...\n");
        printf("List files, or the contents of the current directory");
        printf("if no files\nare given.\n");
        printf("Flags:\n");
        printf("\t-h\tDisplay this help message.\n");
        printf("\t-r\tRecursively list files.\n");
@}


int
main(int argc, char *argv[])
@{
        int                i;
        int                opt;
        int                ret;
        unsigned char        mask = FT_STD|FT_NODESCEND;

        while (-1 != (opt = getopt(argc, argv, "hr"))) @{
                switch (opt) @{
                case 'h':
                        usage(argv[0]);
                        exit(0);
                case 'r':
                        mask &= ~FT_NODESCEND;
                        break;
                default:
                        usage(argv[0]);
                        exit(1);
                @}
        @}

        argc -= optind;
        argv += optind;

        if (0 == argc) @{
                ret = walkdir(".", print_filename, mask);
                printf("\n");
        @}
        else @{
                for (i = 1; i < argc; i++) @{
                        printf("%s:\n", argv[i]);
                        ret = walkdir(argv[i], print_filename, FT_STD);
                        if (-1 == ret) @{
                                break;
                        @}
                        printf("\n");
                @}
        @}
        
        return ret;
@}
@end smallexample


@node Functions Provided
@chapter Functions Provided

@pindex functions
@cindex functions provided

@section makedirs
@example
int
makedirs(const char *path);
@end example
@command{makedirs} creates a path and all required parent directories. The
mode created is the processâ€™s @command{umask(2)} value applied to 0777.
It returns @command{EXIT_SUCCESS} on success and @command{EXIT_FAILURE}
on failure.

@section rmdirs
@example
int
rmdirs(const char *path);
@end example
@command{rmdirs} removes a path and all subdirectories and files.
It returns @command{EXIT_SUCCESS} on success and @command{EXIT_FAILURE}
on failure.

@section path_exists
@example
EXISTS_STATUS
path_exists(const char *path);
@end example
@command{path_exists} combines the functionality of @command{access(2)} and
@command{stat(2)}. It checks whether the process has access to the file and
indicates whether it is a regular file, a directory, or if an error occurs.
The return type is of the enumeration EXISTS_STATUS, which is one of

@itemize
@item @command{EXISTS_ERROR}: there was an error looking up the file;
@item @command{EXISTS_NOENT}: the file does not exist;
@item @command{EXISTS_NOPERM}: the process does not have the appropriate
permissions to access the file.
@item @command{EXISTS_DIR}: the file is a directory;
@item @command{EXISTS_FILE}: the file is a regular file; and
@item @command{EXISTS_OTHER}: the file could be read and is not a directory
or regular file.
@end itemize

@section walkdir
@example
typedef int (*dirwalk_action)(const char *);

extern const unsigned char	FT_ANY;
extern const unsigned char	FT_STD;

int
walkdir(const char *path, dirwalk_action action, unsigned char mask);
@end example

walks through a path on disk and calls an action on a file if it
matches the file type mask. The mask should include some of the file
types listed in @code{readdir(3)} such as @code{DT_DIR} or
@code{DT_REG}. The convenience constants @var{FT_ANY} and @var{FT_STD}
are provided; the former matches any file type and the latter matches
regular files and directories. Note that this will not follow links.
The @code{dirwalk_action} function should take a NULL-terminated path,
and should return -1 on failure and 0 on success. Note that in the
case where the path provided to @code{walkdir} is not a directory, but
its type matches @var{mask}, the action will still be run on it.

@node Getting the Source
@chapter Getting the Source

@pindex obtaining
@cindex obtaining

@section Dependencies
If you will be running the unit tests, @url{http://cunit.sourceforge.net/,CUnit}
is required. If you will be rebuilding the autotools build infrastructure,
you will need automake 1.11 and autoconf >= 2.59.

@section Development Repository
The source code repository is available on
@url{https://github.com/kisom/libdirutils,Github}.
The code there is in the original autotools source; the @command{autogen.sh}
script is provided to run through a complete build, including running through
the provided unit tests:

@example
$ git clone https://github.com/kisom/libdirutils.git dirutils
$ cd dirutils
$ ./autobuild.sh
@end example

Several utility scripts are provided in the @command{scripts} subdirectory;
the @command{autobuild.sh} script calls these. Of note, the
@command{prebuild.sh}
script, which will set the necessary autotools environment variables and call
@command{autoreconf}.

@node Source Code License
@appendix Source Code License

@pindex license
@cindex license

The @command{libdirutils} is released under the ISC license:

@example
Copyright (c) 2012 Kyle Isom <@email{kyle@@tyrfingr.is}>

Permission to use, copy, modify, and distribute this software for any
purpose with or without fee is hereby granted, provided that the above
copyright notice and this permission notice appear in all copies.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
@end example

@node Index
@unnumbered Index

@printindex cp

@bye

